ANVIL KAYIPSIZ VERİ SIKIŞTIRMA ALGORİTMASI

Anvil veri sıkıştırma algoritması içerisinde Huffman ve LZ77 algoritmalarını
barından bir veri sıkıştırma algoritmasıdır.

Anvil algoritması uygulanırken önce dosya LZ77 algoritması ile sıkıştırılır,
ardından sıkıştırılmış dosya Huffman algoritması ile tekrar sıkıştırılır. Dosya
decode edilirken de işlemlerin tam tersi uygulanır. Önce Huffman algoritmasıyla
decode edilen dosya, ardından LZ77 algoritması ile tekrar decode edilir ve
kayıpsız bir şekilde eski dosya elde edilir.

Dosya LZ77 algoritması ile sıkıştırılırken sırayla her bir karaktere bakılır.
Eğer üzerinde bulunulan karakterin kendisi ve devamındaki karakterler önceki
karakterlerden bazılarıyla uyuşuyorsa eşleşen önceki karakter gruplarından
en uzunu dosyaya "uzaklık / uzunluk" olarak yazılır, ardından sonraki karakter
yazılır. Eğer üzerinde bulunulan karakter (grubu) önceden tekrar edilmemişse 
dosyaya uzaklık ve uzunluk değerleri "0 / 0" olarak yazılır. İşlem sonrası 
"uzunluk / uzaklık / sonraki karakter" üçlülerinden oluşan sıkıştırılmış yeni
bir dosya ortaya çıkar.

Dosya Huffman algoritması ile sıkıştırılırken her bir karakterin dosyadaki sayısı
sayılır ve ortaya çıkan değerler ile bir Huffman ağacı inşa edilir. İnşa edilen
ağaç sayesinde sayısı fazla olan karakterler daha az bitlerle, sayısı daha çok olan
bitler ise daha çok bitlerle ifade edilir ve her bir karakter değişken bit sayısına
göre kodlanır. Anvil veri sıkıştırma algoritmasında dosya encode edilirken öncelikle
karakter sayılarının 1 byte'a sığmasını sağlamak için sayılar dosyadaki en yüksek
karakter sayısına göre [0 - 256] değer aralığına normalleştirilir. Ardından dosyanın
başına karakter sayıları "sayı / karakter" çiftleri biçiminde yazılır. Karakter
sayılarının yazımının ardından bitiş işareti olarak bir adet "0" yazılır. Burada
dikkat edilmesi gereken, dosyaya bitiş işareti dışında "karakter sayısı" olarak "0"
yazılmamasıdır. Dosyaya karakter sayıları ve karakter sayılarının bitiş işareti
olan "0" yazıldıktan sonra karakterlere karşılık gelen bitler sırayla yazılır.
Fakat işletim sistemleri dosyalara bit düzeyinde işlem yapılmasına izin vermediği
için son yazılan byte'ta kullanılmamış bitler olabilir. Decoder'ın bu bitlerin
hangisinin bir karakteri ifade ettiğini anlamasını sağlamak için tüm karakterler
yazıldıktan sonra dosyanın sonuna son byte'ta kaç bit kullanıldığı yazılır.
Böylece decoder kullanılmayan bit'lerden anlam çıkarmaya çalışmaz. Dosya decode
edilirken de karakter ve karakter sayıları okunarak yeni bir Huffman ağacı inşa
edilir ve inşa edilen ağaç ile bitler karakterlere dönüştürülür.

Bayram Kazık
